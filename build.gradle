plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.5'
    id 'org.beryx.jlink' version '2.3.1'
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.fazecast:jSerialComm:2.5.1'
    compile 'org.controlsfx:controlsfx:11.0.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
    compile 'commons-io:commons-io:2.6'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.9'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
}

javafx {
    modules = ['javafx.controls', 'javafx.fxml']
}

run {
    doFirst {
        jvmArgs += [
                '--add-exports', 'javafx.base/com.sun.javafx.runtime=org.controlsfx.controls',
                '--add-exports', 'javafx.base/com.sun.javafx.collections=org.controlsfx.controls',
                '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls',
                '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls',
                '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls',
                '--add-exports', 'javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls'
        ]
    }
}

jlink {
    launcher {
        name = project.name
        jvmArgs = ['--add-modules javafx.controls',
                '--add-modules javafx.fxml',
                "--add-reads org.controlsfx.controls=javafx.base,javafx.graphics,javafx.controls",
                "--add-exports=javafx.base/com.sun.javafx.runtime=org.controlsfx.controls",
                "--add-exports=javafx.base/com.sun.javafx.collections=org.controlsfx.controls",
                "--add-exports=javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls",
                "--add-exports=javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls",
                "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls",
                "--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls"]
    }
    mergedModule {
        requires 'java.sql'
    }
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
}

mainClassName = "$moduleName/io.makerplayground.ui.Main"
version = getVersionName()

task createBundle(type: Exec) {
    description 'Build the installable bundle'
    dependsOn 'jlink'
    commandLine = [
            'jpackager',
            'create-image',
            '--name', project.name,
            '--version', version,
            '--output', "${buildDir}/native-image",
            '--runtime-image', "${buildDir}/image",
            '--module', "${moduleName}",
            '--jvm-args', '--add-modules javafx.controls',
            '--jvm-args', '--add-modules javafx.fxml',
            '--jvm-args', "--add-reads org.controlsfx.controls=javafx.base,javafx.graphics,javafx.controls",
            '--jvm-args', "--add-exports javafx.base/com.sun.javafx.runtime=org.controlsfx.controls",
            '--jvm-args', "--add-exports javafx.base/com.sun.javafx.collections=org.controlsfx.controls",
            '--jvm-args', "--add-exports javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls",
            '--jvm-args', "--add-exports javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls",
            '--jvm-args', "--add-exports javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls",
            '--jvm-args', "--add-exports javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls",
            '--jvm-args', "-m ${mainClassName}",
            '--verbose'
    ]
    doLast {
        def os = System.getProperty("os.name").toLowerCase()
        if (os.contains("win")) {
            copy {
                from 'version.txt'
                into "${buildDir}/native-image/${project.name}/app"
            }
            exec {
                commandLine 'cmd', '/c', "cd .\\package\\windows && create-installer.bat ${version}"
            }
        } else if (os.contains("mac")) {
            copy {
                from 'version.txt'
                into "${buildDir}/native-image/${project.name}.app/Contents/Java"
            }
            copy {
                from 'library'
                into "${buildDir}/native-image/${project.name}.app/Contents/Java/library"
            }
            copy {
                from 'package/macosx/mp.icns'
                into "${buildDir}/native-image/${project.name}.app/Contents/Resources"
            }
            // replace version number in Info.plist file
            def plistFile = file("${buildDir}/native-image/${project.name}.app/Contents/Info.plist")
            plistFile.write(plistFile.text.replaceAll('MP_BUILD_VERSION', version.toString()))
            // rename app bundle
            def macBundleName = 'Maker Playground'
            delete "${buildDir}/native-image/${macBundleName}.app"
            ant.move(file: "${buildDir}/native-image/${project.name}.app" , tofile: "${buildDir}/native-image/${macBundleName}.app")
            // copy the app bundle to the package directory
            copy {
                from "${buildDir}/native-image/${macBundleName}.app"
                into "package/macosx/${macBundleName}.app"
            }
            // create pkg installer
            exec {
                commandLine '/bin/sh', '-c', "cd package/macosx && ./createappbundle.sh ${version}"
            }
        } else {
            throw new GradleException("Found unsupported operating system: ${os}")
        }
    }
}

task versionName {
    getVersionName()
}

def getVersionName() {
    // use human readable name build from git commit hash or tag
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    def versionName = stdout.toString().trim()

    // write version.txt file
    def file = new File('version.txt')
    file.write "version=${versionName}\nrelease-date=${new Date().format('yyyy-MM-dd')}"

    return versionName
}